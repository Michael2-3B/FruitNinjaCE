; Zilog eZ80 ANSI C Compiler Release 3.4
; -optsize -noreduceopt -nomodsect -peephole -globalopt
; -localcse -const=ROM 
	FILE	"..\SRC\MAIN.C"
	.assume ADL=1
	SEGMENT BSS
_entX:
	DS	80
_entAng:
	DS	80
_entVel:
	DS	80
	SEGMENT DATA
_entY:
	DF	0.0
	DF	0.0
	DF	0.0
	DF	0.0
	DF	0.0
	DF	0.0
	DF	0.0
	DF	0.0
	DF	0.0
	DF	0.0
	DF	0.0
	DF	0.0
	DF	0.0
	DF	0.0
	DF	0.0
	DF	0.0
	DF	0.0
	DF	0.0
	DF	0.0
	DF	0.0
	SEGMENT BSS
_entName:
	DS	60
	SEGMENT DATA
_sN:
	DW24	_watermelon_data
	DW24	_apple_data
	DW24	_pear_data
	DW24	_pineapple_data
	DW24	_strawberry_data
	SEGMENT TEXT
_s:
	DW	2
	DB	0
	SEGMENT DATA
_eC:
	DW	0
	DB	0
;    1	/*
;    2	 *--------------------------------------
;    3	 * Program Name:CSWIPE
;    4	 * Author:Michael2_3B
;    5	 * License:MIT
;    6	 * Description: A fruit ninja remake for the CE. Swipe the calculator keys to slice fruits!
;    7	 *--------------------------------------
;    8	*/
;    9	
;   10	/* Keep these headers */
;   11	#include <stdbool.h>
;   12	#include <stddef.h>
;   13	#include <stdint.h>
;   14	#include <tice.h>
;   15	
;   16	/* Standard headers (recommended) */
;   17	#include <math.h>
;   18	#include <stdio.h>
;   19	#include <stdlib.h>
;   20	#include <string.h>
;   21	
;   22	#include <graphx.h>
;   23	#include <keypadc.h>
;   24	
;   25	/* Include the sprite data */
;   26	#include "gfx/logo_gfx.h"
;   27	
;   28	#define PI 3.1415926
;   29	
;   30	/* Put your function prototypes here */
;   31	void throwFruit(gfx_sprite_t *fruitname, int curX, int curY, int angle, int velocity);
;   32	void moveEnts();
;   33	
;   34	/*
;   35	gfx_sprite_t *watermelon_out = gfx_MallocSprite(50,50);
;   36	gfx_sprite_t *apple_out = gfx_MallocSprite(50,50);
;   37	gfx_sprite_t *pear_out = gfx_MallocSprite(50,50);
;   38	gfx_sprite_t *pineapple_out = gfx_MallocSprite(50,50);
;   39	gfx_sprite_t *strawberry_out = gfx_MallocSprite(50,50);
;   40	
;   41	gfx_ScaleSprite(watermelon, watermelon_out);
;   42	gfx_ScaleSprite(apple, apple_out);
;   43	gfx_ScaleSprite(pear, pear_out);
;   44	gfx_ScaleSprite(pineapple, pineapple_out);
;   45	gfx_ScaleSprite(strawberry, strawberry_out);
;   46	*/
;   47	
;   48	/* Put all your globals here */
;   49	double entX[20], entAng[20], entVel[20];
;   50	double entY[20] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
;   51	gfx_sprite_t *entName[20];
;   52	gfx_sprite_t *sN[5] = {watermelon, apple, pear, pineapple, strawberry};
;   53	const int s=2;
;   54	int eC=0;
	SEGMENT CODE
;   55	
;   56	void main(void) {
_main:
	LD	HL,-6043
	CALL	__frameset
;   57	    /* Fill in the body of the main function here */
;   58	    kb_key_t key;
;   59	    int xList[1000], yList[1000];
;   60	    int i=0, index=0, gameTime=0, fat=0, x, y, j, randX;
	LD	BC,0
	LD	(IX+-13),BC
	LD	(IX+-7),BC
	LD	(IX+-16),BC
	LD	(IX+-19),BC
;   61	    bool up=true;
;   62	    double speed = 1;
;   63	    gfx_Begin();
	CALL	_gfx_Begin
;   64	    gfx_SetDrawBuffer();
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetDraw
	POP	BC
;   65	    gfx_SetPalette(logo_gfx_pal, sizeof_logo_gfx_pal, 0);
	LD	BC,0
	PUSH	BC
	LD	BC,42
	PUSH	BC
	LD	BC,_logo_gfx_pal
	PUSH	BC
	CALL	_gfx_SetPalette
	POP	BC
	POP	BC
	POP	BC
;   66	    gfx_FillScreen(gfx_blue);
	LD	BC,16
	PUSH	BC
	CALL	_gfx_FillScreen
	POP	BC
;   67	    gfx_SetColor(gfx_white);
	LD	BC,255
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;   68	
;   69	    do {
L_96:
;   70	    	gameTime++;
	LD	BC,(IX+-16)
	INC	BC
	LD	(IX+-16),BC
;   71	    	kb_Scan();
	CALL	_kb_Scan
;   72	    	gfx_FillScreen(gfx_blue);
	LD	BC,16
	PUSH	BC
	CALL	_gfx_FillScreen
	POP	BC
;   73	
;   74	    	if(eC > 0)
	LD	BC,(_eC)
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_3
;   75	    		moveEnts();
	CALL	_moveEnts
L_3:
;   76	
;   77	    	if(gameTime == 25){
	LD	BC,25
	LD	HL,(IX+-16)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_4
;   78	    		randX = (int)(rand() % 320);
	CALL	_rand
	LD	BC,320
	CALL	__irems
	LD	(IX+-31),HL
;   79	    		throwFruit(sN[rand()%5], randX, 240, rand()*PI, 6);
	LD	BC,6
	PUSH	BC
	CALL	_rand
	LD	BC,HL
	CALL	__itol
	CALL	__ltof
	LD	HL,4788186
	LD	E,64
	CALL	__fmul
	CALL	__ftol
	PUSH	BC
	LD	BC,240
	PUSH	BC
	LD	BC,(IX+-31)
	PUSH	BC
	CALL	_rand
	LD	BC,5
	CALL	__irems
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_sN
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_throwFruit
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;   80	    		gameTime = 0;
	LD	BC,0
	LD	(IX+-16),BC
;   81	    	}
L_4:
;   82	
;   83	    	x=0;
	LD	BC,0
	LD	(IX+-10),BC
;   84	    	y=0;
	LD	(IX+-4),BC
;   85	    	if (kb_Data[2]) {
	LD	A,(16056340)
	OR	A,A
	JR	Z,L_31
;   86	    		key = kb_Data[2];
	LD	A,(16056340)
	LD	(IX+-1),A
;   87	    		x=32;
	LD	BC,32
	LD	(IX+-10),BC
;   88	    		if(key == kb_Store) y=188;
	LD	A,(IX+-1)
	CP	A,2
	JR	NZ,L_7
	LD	BC,188
	LD	(IX+-4),BC
L_7:
;   89	    		if(key == kb_Ln) y=154;
	LD	A,(IX+-1)
	CP	A,4
	JR	NZ,L_9
	LD	BC,154
	LD	(IX+-4),BC
L_9:
;   90	    		if(key == kb_Log) y=120;
	LD	A,(IX+-1)
	CP	A,8
	JR	NZ,L_11
	LD	BC,120
	LD	(IX+-4),BC
L_11:
;   91	    		if(key == kb_Square) y=85;
	LD	A,(IX+-1)
	CP	A,16
	JR	NZ,L_13
	LD	BC,85
	LD	(IX+-4),BC
L_13:
;   92	    		if(key == kb_Recip) y=51;
	LD	A,(IX+-1)
	CP	A,32
	JR	NZ,L_15
	LD	BC,51
	LD	(IX+-4),BC
L_15:
;   93	    		if(key == kb_Math) y=17;
	LD	A,(IX+-1)
	CP	A,64
	JR	NZ,L_31
	LD	BC,17
	LD	(IX+-4),BC
;   94	    	}
L_31:
;   95	    	if (kb_Data[3]) {
	LD	A,(16056342)
	OR	A,A
	JR	Z,L_46
;   96	    		key = kb_Data[3];
	LD	A,(16056342)
	LD	(IX+-1),A
;   97	    		x=96;
	LD	BC,96
	LD	(IX+-10),BC
;   98	    		if(key == kb_0) y=222;
	LD	A,(IX+-1)
	CP	A,1
	JR	NZ,L_19
	LD	BC,222
	LD	(IX+-4),BC
L_19:
;   99	    		if(key == kb_1) y=188;
	LD	A,(IX+-1)
	CP	A,2
	JR	NZ,L_21
	LD	BC,188
	LD	(IX+-4),BC
L_21:
;  100	    		if(key == kb_4) y=154;
	LD	A,(IX+-1)
	CP	A,4
	JR	NZ,L_23
	LD	BC,154
	LD	(IX+-4),BC
L_23:
;  101	    		if(key == kb_7) y=120;
	LD	A,(IX+-1)
	CP	A,8
	JR	NZ,L_25
	LD	BC,120
	LD	(IX+-4),BC
L_25:
;  102	    		if(key == kb_Comma) y=85;
	LD	A,(IX+-1)
	CP	A,16
	JR	NZ,L_27
	LD	BC,85
	LD	(IX+-4),BC
L_27:
;  103	    		if(key == kb_Sin) y=51;
	LD	A,(IX+-1)
	CP	A,32
	JR	NZ,L_29
	LD	BC,51
	LD	(IX+-4),BC
L_29:
;  104	    		if(key == kb_Apps) y=17;
	LD	A,(IX+-1)
	CP	A,64
	JR	NZ,L_46
	LD	BC,17
	LD	(IX+-4),BC
;  105	    	}
L_46:
;  106	    	if (kb_Data[4]){
	LD	A,(16056344)
	OR	A,A
	JR	Z,L_61
;  107	    		key = kb_Data[4];
	LD	A,(16056344)
	LD	(IX+-1),A
;  108	    		x=160;
	LD	BC,160
	LD	(IX+-10),BC
;  109	    		if(key == kb_DecPnt) y=222;
	LD	A,(IX+-1)
	CP	A,1
	JR	NZ,L_34
	LD	BC,222
	LD	(IX+-4),BC
L_34:
;  110	    		if(key == kb_2) y=188;
	LD	A,(IX+-1)
	CP	A,2
	JR	NZ,L_36
	LD	BC,188
	LD	(IX+-4),BC
L_36:
;  111	    		if(key == kb_5) y=154;
	LD	A,(IX+-1)
	CP	A,4
	JR	NZ,L_38
	LD	BC,154
	LD	(IX+-4),BC
L_38:
;  112	    		if(key == kb_8) y=120;
	LD	A,(IX+-1)
	CP	A,8
	JR	NZ,L_40
	LD	BC,120
	LD	(IX+-4),BC
L_40:
;  113	    		if(key == kb_LParen) y=85;
	LD	A,(IX+-1)
	CP	A,16
	JR	NZ,L_42
	LD	BC,85
	LD	(IX+-4),BC
L_42:
;  114	    		if(key == kb_Cos) y=51;
	LD	A,(IX+-1)
	CP	A,32
	JR	NZ,L_44
	LD	BC,51
	LD	(IX+-4),BC
L_44:
;  115	    		if(key == kb_Prgm) y=17;
	LD	A,(IX+-1)
	CP	A,64
	JR	NZ,L_61
	LD	BC,17
	LD	(IX+-4),BC
;  116	    	}
L_61:
;  117	    	if (kb_Data[5]) {
	LD	A,(16056346)
	OR	A,A
	JR	Z,L_76
;  118	    		key = kb_Data[5];
	LD	A,(16056346)
	LD	(IX+-1),A
;  119	    		x=224;
	LD	BC,224
	LD	(IX+-10),BC
;  120	    		if(key == kb_Chs) y=222;
	LD	A,(IX+-1)
	CP	A,1
	JR	NZ,L_49
	LD	BC,222
	LD	(IX+-4),BC
L_49:
;  121	    		if(key == kb_3) y=188;
	LD	A,(IX+-1)
	CP	A,2
	JR	NZ,L_51
	LD	BC,188
	LD	(IX+-4),BC
L_51:
;  122	    		if(key == kb_6) y=154;
	LD	A,(IX+-1)
	CP	A,4
	JR	NZ,L_53
	LD	BC,154
	LD	(IX+-4),BC
L_53:
;  123	    		if(key == kb_9) y=120;
	LD	A,(IX+-1)
	CP	A,8
	JR	NZ,L_55
	LD	BC,120
	LD	(IX+-4),BC
L_55:
;  124	    		if(key == kb_RParen) y=85;
	LD	A,(IX+-1)
	CP	A,16
	JR	NZ,L_57
	LD	BC,85
	LD	(IX+-4),BC
L_57:
;  125	    		if(key == kb_Tan) y=51;
	LD	A,(IX+-1)
	CP	A,32
	JR	NZ,L_59
	LD	BC,51
	LD	(IX+-4),BC
L_59:
;  126	    		if(key == kb_Vars) y=17;
	LD	A,(IX+-1)
	CP	A,64
	JR	NZ,L_76
	LD	BC,17
	LD	(IX+-4),BC
;  127	    	}
L_76:
;  128	    	if (kb_Data[6]) {
	LD	A,(16056348)
	OR	A,A
	JR	Z,L_94
;  129	    		key = kb_Data[6];
	LD	A,(16056348)
	LD	(IX+-1),A
;  130	    		x=288;
	LD	BC,288
	LD	(IX+-10),BC
;  131	    		if(key == kb_Enter) y=222;
	LD	A,(IX+-1)
	CP	A,1
	JR	NZ,L_64
	LD	BC,222
	LD	(IX+-4),BC
L_64:
;  132	    		if(key == kb_Add) y=188;
	LD	A,(IX+-1)
	CP	A,2
	JR	NZ,L_66
	LD	BC,188
	LD	(IX+-4),BC
L_66:
;  133	    		if(key == kb_Sub) y=154;
	LD	A,(IX+-1)
	CP	A,4
	JR	NZ,L_68
	LD	BC,154
	LD	(IX+-4),BC
L_68:
;  134	    		if(key == kb_Mul) y=120;
	LD	A,(IX+-1)
	CP	A,8
	JR	NZ,L_70
	LD	BC,120
	LD	(IX+-4),BC
L_70:
;  135	    		if(key == kb_Div) y=85;
	LD	A,(IX+-1)
	CP	A,16
	JR	NZ,L_72
	LD	BC,85
	LD	(IX+-4),BC
L_72:
;  136	    		if(key == kb_Power) y=51;
	LD	A,(IX+-1)
	CP	A,32
	JR	NZ,L_74
	LD	BC,51
	LD	(IX+-4),BC
L_74:
;  137	    		if(key == kb_Clear) y=17;
	LD	A,(IX+-1)
	CP	A,64
	JR	NZ,L_94
	LD	BC,17
	LD	(IX+-4),BC
;  138	    	}
L_94:
;  139	
;  140	    	if(y>0){
	LD	BC,(IX+-4)
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	JP	P,L_93
;  141	    		if(index>0){
	LD	BC,(IX+-7)
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_82
;  142	    			if(x==xList[index-1] && y==yList[index-1]){
	LD	BC,(IX+-7)
	DEC	BC
	LD	HL,3
	CALL	__imulu
	LD	(IX+-28),BC
	LD	(IX+-25),HL
	LD	HL,IX
	LD	BC,-6031
	ADD	HL,BC
	LD	BC,(IX+-25)
	ADD	HL,BC
	LD	HL,(HL)
	OR	A,A
	LD	BC,(IX+-10)
	SBC	HL,BC
	JR	NZ,L_82
	LD	HL,IX
	LD	BC,-3031
	ADD	HL,BC
	LD	BC,(IX+-25)
	ADD	HL,BC
	LD	HL,(HL)
	OR	A,A
	LD	BC,(IX+-4)
	SBC	HL,BC
	JR	NZ,L_82
;  143	    				index--;
	LD	BC,(IX+-28)
	LD	(IX+-7),BC
;  144	    				fat++;
	LD	BC,(IX+-19)
	INC	BC
	LD	(IX+-19),BC
;  145	    			}
;  146	    		}
L_82:
;  147	    		xList[index] = x;
	LD	HL,(IX+-7)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	LD	HL,IX
	LD	DE,-6031
	ADD	HL,DE
	LD	DE,BC
	ADD	HL,DE
	LD	DE,(IX+-10)
	LD	(HL),DE
;  148	    		yList[index] = y;
	LD	HL,IX
	LD	DE,-3031
	ADD	HL,DE
	ADD	HL,BC
	LD	BC,(IX+-4)
	LD	(HL),BC
;  149	    		if(index>0){
	LD	BC,(IX+-7)
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_86
;  150	    			gfx_Line(xList[index-1],yList[index-1],x,y);
	LD	BC,(IX+-7)
	DEC	BC
	LD	HL,3
	CALL	__imulu
	LD	DE,HL
	LD	(IX+-22),BC
	LD	BC,-3031
	LD	HL,(IX+-4)
	PUSH	HL
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-6040	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,DE
	PUSH	BC
	PUSH	HL
	LD	HL,BC	; unspill
	LD	BC,-6043	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,-6040	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	LD	HL,(IX+-10)
	PUSH	HL
	LD	HL,IX
	ADD	HL,BC
	LD	BC,-6043	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	LD	HL,IX
	LD	BC,-6031
	ADD	HL,BC
	LD	BC,DE
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_Line
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  151	    			if(fat > 0)
	LD	BC,(IX+-19)
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_86
;  152	    				gfx_Line(xList[index-1],yList[index-1]-1,x,y-1);
	LD	HL,3
	LD	BC,(IX+-22)
	CALL	__imulu
	LD	BC,HL
	LD	DE,(IX+-4)
	DEC	DE
	PUSH	DE
	LD	DE,-3031
	PUSH	BC
	PUSH	HL
	LD	HL,DE
	LD	BC,-6034	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	DE,BC
	PUSH	BC
	PUSH	HL
	LD	HL,DE	; unspill
	LD	BC,-6037	; spill
	CALL	__istix
	POP	HL
	LD	BC,-6034	; unspill
	PUSH	HL
	CALL	__ildix
	LD	DE,HL
	POP	HL
	POP	BC
	LD	HL,(IX+-10)
	PUSH	HL
	LD	HL,IX
	ADD	HL,DE
	PUSH	BC
	LD	BC,-6037	; unspill
	PUSH	HL
	CALL	__ildix
	LD	DE,HL
	POP	HL
	POP	BC
	ADD	HL,DE
	LD	DE,(HL)
	DEC	DE
	PUSH	DE
	LD	HL,IX
	LD	DE,-6031
	ADD	HL,DE
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_Line
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  153	    		}
L_86:
;  154	    		index++;
	LD	BC,(IX+-7)
	INC	BC
	LD	(IX+-7),BC
;  155	    		i=0;
	LD	BC,0
	LD	(IX+-13),BC
;  156	    		if(index==1000)
	LD	HL,(IX+-7)
	OR	A,A
	LD	BC,1000
	SBC	HL,BC
	JR	NZ,L_95
;  157	    			index=0;
	LD	BC,0
	LD	(IX+-7),BC
;  158	    	} else {
	JR	L_95
L_93:
;  159	    		if(i < 101){
	LD	BC,101
	LD	HL,(IX+-13)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_91
;  160	    			i++;
	LD	BC,(IX+-13)
	INC	BC
	LD	(IX+-13),BC
;  161	    		}
L_91:
;  162	    		if(i==10){
	LD	BC,10
	LD	HL,(IX+-13)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_95
;  163	    			index=0;
	LD	BC,0
	LD	(IX+-7),BC
;  164	    			fat=0;
	LD	(IX+-19),BC
;  165	    		}
;  166	    	}
L_95:
;  167	
;  168	    	gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  169	
;  170	    } while (kb_Data[1] != kb_2nd);
	LD	A,(16056338)
	CP	A,32
	JR	NZ,L_96
;  171	    
;  172	    gfx_End();
	CALL	_gfx_End
;  173	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _main ***************************
;Name                         Addr/Register   Size   Type
;_gfx_End                            IMPORT  -----   function
;_gfx_SwapDraw                       IMPORT  -----   function
;_gfx_Line                           IMPORT  -----   function
;_sN                                 STATIC     15   variable
;_throwFruit                         IMPORT  -----   function
;_rand                               IMPORT  -----   function
;_moveEnts                           IMPORT  -----   function
;_eC                                 STATIC      3   variable
;_kb_Scan                            IMPORT  -----   function
;_gfx_SetColor                       IMPORT  -----   function
;_gfx_FillScreen                     IMPORT  -----   function
;_logo_gfx_pal                       IMPORT     42   variable
;_gfx_SetPalette                     IMPORT  -----   function
;_gfx_SetDraw                        IMPORT  -----   function
;_gfx_Begin                          IMPORT  -----   function
;xList                              IX-6031   3000   variable
;yList                              IX-3031   3000   variable
;randX                                IX-31      3   variable
;G_1                                  IX-28      3   variable
;G_0                                  IX-25      3   variable
;G_2                                  IX-22      3   variable
;fat                                  IX-19      3   variable
;gameTime                             IX-16      3   variable
;i                                    IX-13      3   variable
;x                                    IX-10      3   variable
;index                                 IX-7      3   variable
;y                                     IX-4      3   variable
;key                                   IX-1      1   variable


; Stack Frame Size: 6049 (bytes)
;       Spill Code: 0 (instruction)


;  174	
;  175	/* Put other functions here */
;  176	
;  177	/* Throw a fruit onto the screen */
;  178	void throwFruit(gfx_sprite_t *fruitname, int curX, int curY, int angle, int velocity){
_throwFruit:
	LD	HL,-6
	CALL	__frameset
;  179		int j=0;
	LD	BC,0
	LD	(IX+-6),BC
;  180		while(entY[j] > 0){
	JR	L_101
L_102:
;  181			j++;
	LD	BC,(IX+-6)
	INC	BC
	LD	(IX+-6),BC
;  182		}
L_101:
	LD	HL,(IX+-6)
	ADD	HL,HL
	ADD	HL,HL
	LD	(IX+-3),HL
	LD	BC,_entY
	ADD	HL,BC
	LD	IY,HL
	OR	A,A
	SBC	HL,HL
	LD	BC,(IY)
	LD	A,(IY+3)
	LD	E,0
	CALL	__fcmp
	JP	M,L_102
;  183		entName[j] = fruitname;
	LD	HL,(IX+-6)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_entName
	ADD	HL,BC
	LD	BC,(IX+6)
	LD	(HL),BC
;  184		entX[j] = curX;
	LD	BC,(IX+9)
	CALL	__itol
	CALL	__ltof
	LD	HL,(IX+-3)
	LD	DE,_entX
	ADD	HL,DE
	LD	IY,HL
	LD	(IY),BC
	LD	(IY+3),A
;  185		entY[j] = curY;
	LD	BC,(IX+12)
	CALL	__itol
	CALL	__ltof
	LD	HL,(IX+-3)
	LD	DE,_entY
	ADD	HL,DE
	LD	IY,HL
	LD	(IY),BC
	LD	(IY+3),A
;  186		entAng[j] = angle;
	LD	BC,(IX+15)
	CALL	__itol
	CALL	__ltof
	LD	HL,(IX+-3)
	LD	DE,_entAng
	ADD	HL,DE
	LD	IY,HL
	LD	(IY),BC
	LD	(IY+3),A
;  187		entVel[j] = velocity;
	LD	BC,(IX+18)
	CALL	__itol
	CALL	__ltof
	LD	HL,(IX+-3)
	LD	DE,_entVel
	ADD	HL,DE
	LD	IY,HL
	LD	(IY),BC
	LD	(IY+3),A
;  188		eC++;
	LD	BC,(_eC)
	INC	BC
	LD	(_eC),BC
;  189	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _throwFruit ***************************
;Name                         Addr/Register   Size   Type
;_eC                                 STATIC      3   variable
;_entVel                             STATIC     80   variable
;_entAng                             STATIC     80   variable
;_entX                               STATIC     80   variable
;_entName                            STATIC     60   variable
;_entY                               STATIC     80   variable
;j                                     IX-6      3   variable
;G_3                                   IX-3      3   variable
;velocity                             IX+18      3   parameter
;angle                                IX+15      3   parameter
;curY                                 IX+12      3   parameter
;curX                                  IX+9      3   parameter
;fruitname                             IX+6      3   parameter


; Stack Frame Size: 27 (bytes)
;       Spill Code: 0 (instruction)


;  190	
;  191	/* Move any entities that are on the screen */
;  192	void moveEnts(){
_moveEnts:
	LD	HL,-21
	CALL	__frameset
;  193		int j;
;  194		for(j=0; j<20; j++){
	LD	BC,0
	LD	(IX+-6),BC
	JR	L_114
L_112:
;  195			if(entY[j] > 0){
	LD	HL,(IX+-6)
	ADD	HL,HL
	ADD	HL,HL
	LD	(IX+-3),HL
	LD	BC,_entY
	ADD	HL,BC
	LD	(IX+-9),HL
	LD	IY,(IX+-9)
	LD	BC,(IY)
	LD	A,(IY+3)
	OR	A,A
	SBC	HL,HL
	LD	E,0
	CALL	__fcmp
	JP	P,L_113
;  196				gfx_TransparentSprite(entName[j], entX[j], entY[j]);
	LD	BC,_entY
	LD	HL,(IX+-3)
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(IY)
	LD	A,(IY+3)
	CALL	__ftol
	PUSH	BC
	LD	HL,(IX+-3)
	LD	BC,_entX
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(IY)
	LD	A,(IY+3)
	CALL	__ftol
	PUSH	BC
	LD	HL,(IX+-6)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_entName
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  197				entY[j] -= entVel[j];
	LD	BC,(IX+-3)
	LD	HL,_entY
	ADD	HL,BC
	LD	(IX+-18),HL
	LD	BC,(IX+-3)
	LD	HL,_entVel
	ADD	HL,BC
	LD	(IX+-15),HL
	LD	IY,(IX+-15)
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	IY,(IX+-18)
	LD	BC,(IY)
	LD	A,(IY+3)
	CALL	__fsub
	LD	(IY),BC
	LD	(IY+3),A
;  198				entVel[j] -= 0.1;
	LD	IY,(IX+-15)
	LD	BC,(IY)
	LD	A,(IY+3)
	LD	HL,13421773
	LD	E,61
	CALL	__fsub
	LD	(IY),BC
	LD	(IY+3),A
;  199				entX[j] += 3*cos(entAng[j]);
	LD	HL,(IX+-3)
	LD	BC,_entX
	ADD	HL,BC
	LD	(IX+-21),HL
	LD	HL,(IX+-3)
	LD	BC,_entAng
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+3)
	LD	H,0
	LD	L,A
	PUSH	HL
	LD	BC,(IY)
	PUSH	BC
	CALL	_cos
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,4194304
	LD	E,64
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	LD	IY,(IX+-21)
	LD	BC,(IY)
	LD	A,(IY+3)
	CALL	__fadd
	LD	HL,(IX+-3)
	LD	DE,_entX
	ADD	HL,DE
	LD	IY,HL
	LD	(IY),BC
	LD	(IY+3),A
;  200				if(entY[j] >= 240 || entX[j] >= 320 || entX[j] <= 0){
	LD	HL,(IX+-3)
	LD	BC,_entY
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	A,67
	LD	BC,7340032
	CALL	__fcmp
	JP	P,L_110
	LD	BC,(IX+-3)
	LD	HL,_entX
	ADD	HL,BC
	LD	(IX+-12),HL
	LD	IY,(IX+-12)
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	BC,10485760
	CALL	__fcmp
	JP	P,L_110
	LD	IY,(IX+-12)
	LD	BC,(IY)
	LD	A,(IY+3)
	OR	A,A
	SBC	HL,HL
	LD	E,0
	CALL	__fcmp
	JP	M,L_113
L_110:
;  201					entY[j] = 0;
	LD	HL,(IX+-9)
	LD	BC,0
	LD	(HL),BC
	INC	HL
	INC	HL
	INC	HL
	LD	(HL),0
;  202					eC--;
	LD	BC,(_eC)
	DEC	BC
	LD	(_eC),BC
;  203				}
;  204			}
;  205		}
L_113:
	LD	BC,(IX+-6)
	INC	BC
	LD	(IX+-6),BC
L_114:
	LD	BC,20
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_112
	LD	SP,IX
	POP	IX
	RET	


;**************************** _moveEnts ***************************
;Name                         Addr/Register   Size   Type
;_eC                                 STATIC      3   variable
;_entAng                             STATIC     80   variable
;_cos                                IMPORT  -----   function
;_entVel                             STATIC     80   variable
;_entName                            STATIC     60   variable
;_entX                               STATIC     80   variable
;_gfx_TransparentSprite              IMPORT  -----   function
;_entY                               STATIC     80   variable
;G_8                                  IX-12      3   variable
;G_9                                   IX-9      3   variable
;j                                     IX-6      3   variable
;G_4                                   IX-3      3   variable


; Stack Frame Size: 27 (bytes)
;       Spill Code: 0 (instruction)


	XREF _logo_gfx_pal:ROM
	XREF _pear_data:ROM
	XREF _apple_data:ROM
	XREF _pineapple_data:ROM
	XREF _watermelon_data:ROM
	XREF _strawberry_data:ROM
	XREF _kb_Scan:ROM
	XREF _gfx_TransparentSprite:ROM
	XREF _gfx_SwapDraw:ROM
	XREF _gfx_SetDraw:ROM
	XREF _gfx_Line:ROM
	XREF _gfx_FillScreen:ROM
	XREF _gfx_SetPalette:ROM
	XREF _gfx_SetColor:ROM
	XREF _gfx_End:ROM
	XREF _gfx_Begin:ROM
	XREF _rand:ROM
	XREF _cos:ROM
	XREF __imulu:ROM
	XREF __irems:ROM
	XREF __fadd:ROM
	XREF __fsub:ROM
	XREF __fmul:ROM
	XREF __fcmp:ROM
	XREF __ftol:ROM
	XREF __ltof:ROM
	XREF __itol:ROM
	XREF __ildix:ROM
	XREF __istix:ROM
	XREF __frameset:ROM
	XREF __setflag:ROM
	XDEF _moveEnts
	XDEF _throwFruit
	XDEF _main
	XDEF _eC
	XDEF _s
	XDEF _sN
	XDEF _entName
	XDEF _entY
	XDEF _entVel
	XDEF _entAng
	XDEF _entX
	END
